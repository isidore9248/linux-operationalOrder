1、以调试模式编译源文件 添加-g选项
    gcc -g test.c -o <可执行文件名>   将test.c编译为test可执行文件
    
2、启动GDB
    gdb <可执行文件名> 

(启动GDB后)
3、设置参数
    set args xxxx   设置参数
        eg. set args 10 20 "hello world"
    show args   查看设置好的运行参数

(启动GDB后)
4、设置断点
    break [函数名/行号]  设置断点
    info breakpoints   显示断点信息
        简写： info：i      breakpoints：b、break
c++中可以使用以下方式：
    break <文件名>:<行号>
    break <文件名>:<函数名>
    break <类名>:<函数名>
    break <命名空间>:<类名>:<函数名>

条件断点：
    break <文件名>:<行号> if <条件>
        eg. break test.c:10 if i==5

删除断点：
    delete <断点编号>  删除指定编号的断点
    简写：d
        eg. delete 12-15    删除编号从12-15的断点
    delete 删除所有断点
禁用/启用断点：
    disable/enable <断点编号>  禁用(启用)指定编号的断点
        简写：dis / en

(启动GDB后)
5、调试
    run 启动运行程序
    list [num] 查看行号后num行代码。
    list - 查看行号前的10行代码。
单步调试：可以使用以下命令逐步执行程序：
    next：执行下一行（不进入函数）。 
        简写：n
    step：执行下一行（如果是函数调用，会进入函数内部）。
        简写：s
    continue：继续执行到下一个断点。
        简写：c
    finish：执行完当前函数，返回到调用该函数的地方。
        简写：f

(启动GDB后)
6、查看变量
    print [变量名] 打印变量的值。
        简写：p 
    display [变量名]  打印变量的值，并且每次运行程序后都会打印。
    ptype [变量名]  查看变量的类型

(启动GDB后)
7、调试多进程	如果不做任何set，则GDB默认追踪父进程
	set follow-fork-mode child	设置GDB追踪子进程
	set follow-fork-mode parent	设置GDB追踪父进程

